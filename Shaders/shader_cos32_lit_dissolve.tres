[gd_resource type="Shader" format=3 uid="uid://s6tygpuakw2p"]

[resource]
code = "shader_type spatial;
render_mode vertex_lighting, shadows_disabled, blend_mix, diffuse_lambert;

#include \"res://Cosma32Library/Shaders/Includes/fromLinear.gdshaderinc\"

uniform vec4 modulate: source_color = vec4(1,1,1,1);
uniform sampler2D image_texture: source_color;
uniform sampler2D dissolve_texture;
uniform vec2 dissolve_scale = vec2(1.0);
uniform vec2 dissolve_offset = vec2(0.0);
uniform vec2 dissolve_scrolling_velocity = vec2(0.0);
uniform vec2 image_size = vec2(64,64);
uniform vec2 uv_scale = vec2(1.0);
uniform vec2 uv_offset = vec2(0.0);
uniform vec2 uv_scrolling_velocity = vec2(0.0);
uniform float alpha_scissor = 0;

const float vertex_snapping_offset = 0.8;
const vec2 resolution = vec2(960,720);

void vertex() {
	vec4 base_position = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX, 1.0);
	vec4 snapped_position = base_position;
	snapped_position.xyz = base_position.xyz / base_position.w;

	vec2 snap_resolution = floor(resolution*(1.0 - vertex_snapping_offset));
	snapped_position.x = floor(snap_resolution.x * snapped_position.x) / snap_resolution.x;
	snapped_position.y = floor(snap_resolution.y * snapped_position.y) / snap_resolution.y;

	snapped_position.xyz *= base_position.w;
	POSITION = snapped_position;
}

void fragment() {
	vec2 mod_uv = UV * uv_scale + uv_offset + (uv_scrolling_velocity*TIME);
	vec4 texture_sample = texture(image_texture, mod_uv) * modulate * fromLinear(COLOR);

	vec2 mod_dissolve = UV * dissolve_scale + dissolve_offset + (dissolve_scrolling_velocity*TIME);

    ALBEDO = texture_sample.rgb;
    ALPHA = texture(dissolve_texture, mod_dissolve).r;
    ALPHA_SCISSOR_THRESHOLD = alpha_scissor;
}"

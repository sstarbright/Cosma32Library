[gd_resource type="Shader" format=3 uid="uid://u7ieqx3wo6ss"]

[resource]
code = "shader_type spatial;
render_mode unshaded, blend_sub;

#include \"res://Cosma32Library/Shaders/Includes/fromLinear.gdshaderinc\"

uniform vec4 modulate: source_color = vec4(1,1,1,1);
uniform sampler2D image_texture : source_color;
uniform vec2 image_size = vec2(64,64);
uniform bool lock_aspect = false;
uniform float aspect_ratio = 1.3333333;
uniform vec2 fov = vec2(180.0, 90.0);
uniform vec2 tiling = vec2(1, 1);
uniform vec2 offset = vec2(0.0, 0.0);
uniform vec2 scrolling_velocity = vec2(0.0);
uniform float alpha_scissor = 0;

varying vec2 BG_COORDS;
varying vec2 BG_SCALE;

void vertex() {
	//Camera YX rotation per Basis.get_euler source code
	float y = atan(INV_VIEW_MATRIX[0][2], INV_VIEW_MATRIX[2][2]);
	float x = asin(INV_VIEW_MATRIX[1][2]);

	//Map rotation to screen space
	BG_COORDS = vec2(y * 0.5, -x) * -(1.0 / PI);
	BG_COORDS.y += 0.5;

	BG_SCALE.y = fov.y * (1.0 / 180.0);
	BG_SCALE.x = !lock_aspect ?
		fov.x * (1.0 / 360.0) :
		VIEWPORT_SIZE.x / (VIEWPORT_SIZE.y * aspect_ratio) * BG_SCALE.y;

	//Keep background centered vertically when FOV changes
	BG_COORDS.y *= BG_SCALE.y > 1.0 ? 0.0 : 1.0 - BG_SCALE.y;
}

void fragment() {
	vec4 filtered_tex = texture(image_texture, ((SCREEN_UV + vec2(-offset.x, offset.y)) * BG_SCALE + BG_COORDS + scrolling_velocity*TIME) * tiling) * modulate * COLOR;
	ALBEDO = filtered_tex.rgb;
    ALPHA_SCISSOR_THRESHOLD = alpha_scissor;
}"

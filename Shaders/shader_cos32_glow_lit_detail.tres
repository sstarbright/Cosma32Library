[gd_resource type="Shader" format=3 uid="uid://xhfpjw06vbxu"]

[resource]
code = "shader_type spatial;
render_mode vertex_lighting, shadows_disabled, blend_add, diffuse_lambert;

#include \"res://Cosma32Library/Shaders/Includes/fromLinear.gdshaderinc\"
#include \"res://Cosma32Library/Shaders/Includes/vertexSnap.gdshaderinc\"

uniform vec4 modulate: source_color = vec4(1,1,1,1);
uniform sampler2D image_texture: source_color;

uniform vec2 image_size = vec2(64,64);
uniform vec2 uv_scale = vec2(1.0);
uniform vec2 uv_offset = vec2(0.0);
uniform vec2 uv_scrolling_velocity = vec2(0.0);
uniform float alpha_scissor = 0;

uniform vec2 vertex_snapping_resolution = vec2(960,720);

void vertex() {
	POSITION = snapVertex(PROJECTION_MATRIX, MODELVIEW_MATRIX, VERTEX, vertex_snapping_resolution);
}

void fragment() {
	vec2 mod_uv = UV * uv_scale + uv_offset + (uv_scrolling_velocity*TIME);
	vec4 texture_sample = texture(image_texture, mod_uv);

    ALBEDO = mix(COLOR.rgb, texture_sample.rgb, texture_sample.a) * modulate.rgb;
	ALPHA = COLOR.a * modulate.a;
    ALPHA_SCISSOR_THRESHOLD = alpha_scissor;
}"
